#!/bin/bash

# Checkout README.md for info

INFO="\033[93m[INFO]" # yellow
ERROR="\033[91m[ERROR]" # red
MENU="\033[94m" # blue
OPTIONS="\033[96m" # cyan

running=1

stop_script() {
    printf "\n$INFO MySCP not finished yet!"
    printf "\n$INFO Quitting MySCP...\n"
    exit
    running=0
}

stop_script

clear

sessions_path=~/.ssh/myssh_sessions

if [[ ! $(command -v scp) ]]; then
    printf "$ERROR scp command doesn't exist or is not available\n"
    stop_script
fi

if [[ ! -f $sessions_path ]]; then
    if [[ ! -d ~/.ssh ]]; then
        mkdir ~/.ssh
    fi
    
    printf "$INFO MySSH Sessions not found at $sessions_path\n"
    printf "$INFO Creating MySSH Sessions file at $sessions_path\n"
    touch $sessions_path
    echo ""
fi

print_menu() {
    length=$(wc -l $sessions_path | awk '{print $1}')

    printf "$MENU""Select SCP Operation\n"
    echo "--------------------"

    printf "$OPTIONS""[1] From LOCAL to REMOTE\n"
    printf "$OPTIONS""[2] From REMOTE to LOCAL\n"
    printf "$OPTIONS""[3] From REMOTE to REMOTE\n"

    # if [[ -s $sessions_path ]]; then
    #     i=1
    #     while read -r line; do
    #         printf "$OPTIONS[$i] $line\n"
    #         i=$((i+1))
    #     done < $sessions_path
    # else
    #     printf "$OPTIONS""No sessions found\n"
    # fi

    printf "\n$MENU""Other Options\n"
    echo "-------------"
    printf "$OPTIONS[a] Add / edit SSH sessions\n"
    printf "$OPTIONS[h] Help\n"
    printf "$OPTIONS[q] Quit\n"

    printf "\nSelect an option: "
    read choice
}

while [[ $running -eq 1 ]]; do
    
    print_menu

    if [[ $choice -eq 1 ]]; then
        echo "Yup"
    fi

    if [[ $choice == "a" ]]; then

        clear

        printf "$MENU""Add / edit SSH Sessions\n"
        echo "-----------------------"
        printf "$OPTIONS[v] Edit with Vi\n"
        printf "$OPTIONS[n] Edit with Nano\n"
        printf "$OPTIONS[r] Return\n"

        printf "\nSelect an option: "
        read choice

        echo ""

        if [[ $choice == "v" ]]; then
            if [[ ! $(command -v vi) ]]; then
                clear
                printf "$ERROR vi command doesn't exist or is not available\n\n"
            else
                vi $sessions_path
                clear
                printf "$INFO SSH Sessions updated!\n\n"
            fi
        
        elif [[ $choice == "n" ]]; then
            if [[ ! $(command -v nano) ]]; then
                clear
                printf "$ERROR nano command doesn't exist or is not available\n\n"                
            else
                nano $sessions_path
                clear
                printf "$INFO SSH Sessions updated!\n\n"
            fi
        
        elif [[ $choice == "r" ]]; then
            :
        
        else
            clear
            printf "$ERROR Invalid input, returning to main menu\n\n"

        fi

    elif [[ $choice == "h" ]]; then
        clear
        
        help=$(echo -e "$MENU""MySSH Help (hit 'q' to exit)")
        help+=$(echo -e "\n$MENU----------------------------")
        help+=$'\n\n'
        help+=$(echo -e "$OPTIONS""USAGE:")
        help+=$'\n  Run the script in your terminal by typing in \'myssh\'.'
        help+=$' (if you are reading this message, you probably already did this)'
        help+=$'\n'
        help+=$'\n  Also remember to add \'myssh\' to your PATH, so that it can be used anywhere'
        help+=$'\n\n'
        help+=$(echo -e "$OPTIONS""SESSIONS FILE:")
        help+=$'\n  The file located at $sessions_path stores your SSH sessions'
        help+=$' Use option \'a\' in this script to add to it, or simply use a text editor'
        help+=$'\n'
        help+=$'\n  Each line of the sessions file should contain valid arguments for'
        help+=$' the \'ssh\' command. In other words, each line should be the arguments'
        help+=$' you would normally pass the \'ssh\' command'
        help+=$'\n'
        help+=$'\n  An example sessions file could be as follows:'
        help+=$'\n'
        help+=$'\n    +----------------------+'
        help+=$'\n    | admin@dev-server.com |'
        help+=$'\n    | 123.23.42.51 -l bob  |'
        help+=$'\n    | ...                  |'
        help+=$'\n    +----------------------+'
        help+=$'\n'
        help+=$'\n(hit \'q\' to exit)'
        help+=$'\n'

        echo "$help" | less

    elif [[ $choice == "q" ]]; then
        stop_script

    else
        clear
        printf "$ERROR Invalid input\n\n"

    fi

done